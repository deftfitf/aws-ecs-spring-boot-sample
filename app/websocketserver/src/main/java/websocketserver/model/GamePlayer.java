package websocketserver.model;

import com.amazonaws.services.dynamodbv2.datamodeling.*;
import lombok.NoArgsConstructor;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.AuthorityUtils;
import org.springframework.security.core.userdetails.UserDetails;
import websocketserver.auth.Role;

import java.util.Collection;

@DynamoDBTable(tableName = "game_player")
@NoArgsConstructor
public class GamePlayer implements UserDetails {

    private String playerId;
    private String playerDisplayName;
    private String encodedPassword;
    private String iconUrl;

    public GamePlayer(String playerDisplayName, String encodedPassword) {
        this.playerDisplayName = playerDisplayName;
        this.encodedPassword = encodedPassword;
    }

    @DynamoDBHashKey
    @DynamoDBAutoGeneratedKey
    public String getPlayerId() {
        return playerId;
    }

    public void setPlayerId(String playerId) {
        this.playerId = playerId;
    }

    @DynamoDBAttribute
    public String getPlayerDisplayName() {
        return playerDisplayName;
    }

    public void setPlayerDisplayName(String playerDisplayName) {
        this.playerDisplayName = playerDisplayName;
    }

    @DynamoDBAttribute
    public String getIconUrl() {
        return iconUrl;
    }

    public void setIconUrl(String iconUrl) {
        this.iconUrl = iconUrl;
    }


    @DynamoDBAttribute
    public String getEncodedPassword() {
        return encodedPassword;
    }

    public void setEncodedPassword(String encodedPassword) {
        this.encodedPassword = encodedPassword;
    }

    @Override
    @DynamoDBIgnore
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return AuthorityUtils.createAuthorityList(Role.PLAYER.getRole());
    }

    @Override
    @DynamoDBIgnore
    public String getPassword() {
        return getEncodedPassword();
    }

    @Override
    @DynamoDBIgnore
    public String getUsername() {
        return getPlayerId();
    }

    @Override
    @DynamoDBIgnore
    public boolean isAccountNonExpired() {
        return true;
    }

    @Override
    @DynamoDBIgnore
    public boolean isAccountNonLocked() {
        return true;
    }

    @Override
    @DynamoDBIgnore
    public boolean isCredentialsNonExpired() {
        return true;
    }

    @Override
    @DynamoDBIgnore
    public boolean isEnabled() {
        return true;
    }
}
